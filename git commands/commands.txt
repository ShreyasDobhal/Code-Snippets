To check the status of the files (changed)
git status

To add files to staging area
git add <filename>
git add .

To remove file from staging area
git rm --cached <filename>

To commit changes 
git commit -m 'Commit Message'

To get the log of all the commits
git log
git log --oneline

To see or go to some commit point in history
git checkout <commitid>
git checkout master

To revert change as save it as another commit
git revert <commitid>

To completely delete changes at rollback to some earlier commit
git reset <commitid>
git reset <commitid> --hard

To create a new branch (needs to be in master branch)
git branch <branchname> (but still stays in master branch)
git checkout <branchname> (to switch to that branch)
git checkout -b <branchname> (to switch to a new branch)

To see all the branches (and current branch)
git branch -a

To delete a branch (needs to be in master branch)
git branch -D <branchname> (if branch not already merged to master branch)

To merge a branch back into master branch (needs to be in master branch)
git merge <branchname>

To push project to a repository
git push <git-url.git> master
git remote add origin <git-url.git> (Creating an alias for <git-url>, Use git remote -v to see all alias)
git push origin master


To clone a repo to your local system
git clone <git-url.git>

To pull all the changes made in a branch
git pull origin master

To collaborate on a project
1) Clone the repo using 
    git clone <git-url.git>
2) Create a branch using 
    git checkout -b <branchname>
3) Make changes on your project
4) Add modified files to staging area using 
    git add .
5) Commit the modified files
    git commit -m 'Commit message'
6) Push the changes to repo using
    git push origin <branchname>
    After this go to GitHub and accept the request to merge it into master branch
7) Before starting any changes use pull request in master branch to stay updated
    git checkout master
    git pull origin master
    git checkout <branchname>
